<?php

namespace Tests\Feature;

use Illuminate\Support\Facades\Auth;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithoutMiddleware;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\DatabaseTransactions;

class ThreadTest extends TestCase
{
    /**
     * A basic test example.
     *
     * @return void
     */

    use DatabaseMigrations;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->thread = factory('App\Thread')->create();

    }

    public function test_a_user_can_view_all_threads()
    {

        $response = $this->get('/threads');

        $response->assertSee($this->thread->title);



    }

    function test_a_user_can_read_a_single_thread(){

        $response = $this->get($this->thread->path());

        $response->assertSee($this->thread->title);
    }

    function test_a_user_can_read_replies_that_are_associated_with_a_thread(){


        $reply= factory('App\Reply')->create(['thread_id'=>$this->thread->id]);

        //when we visit the thread page
        //we should see the reply

        $response= $this->get($this->thread->path())
            ->assertSee($reply->body);

    }



    function test_a_thread_belongs_to_a_channel(){

        $thread = create('App\Thread');

        $this->assertInstanceOf('App\Channel',$thread->channel);
    }

    function test_a_user_can_filter_threads_according_to_a_channel(){

        $channel = create('App\Channel');
        $threadInChannel = create('App\Thread',['channel_id'=>$channel->id]);
        $threadNotInChannel = create('App\Thread');

        $this->get('/threads/'.$channel->slug)
            ->assertSee($threadInChannel->title)
            ->assertDontSee($threadNotInChannel->title);
    }

    function test_a_user_can_filter_threads_by_any_username(){

        $this->signIn(create('App\User',['name'=>'JohnDoe']));

        $threadByJohn = create('App\Thread',['user_id'=>auth()->id()]);
        $threadNotByJohn = create('App\Thread');

        $this->get('threads?by=JohnDoe')
            ->assertSee($threadByJohn->title)
            ->assertDontSee($threadNotByJohn->title);

    }

    function test_a_user_can_filter_threads_by_popularity(){
            //Given we have three threads
            // with 2,3 and 0 replies respectively

            $ThreadWithTwoReplies = create('App\Thread');
                create('App\Reply',['thread_id'=>$ThreadWithTwoReplies->id],2);


        $ThreadWithThreeReplies = create('App\Thread');
        create('App\Reply',['thread_id'=>$ThreadWithThreeReplies->id],3);

        $ThreadWithNoReplies = $this->thread;



        //When I filter all  threads by popularity
                $response = $this->getJson('threads?popular=1')->json();
            // then they should be returned from most replies to least

            $this->assertEquals([3,2,0], array_column($response,'replies_count'));

    }

}
